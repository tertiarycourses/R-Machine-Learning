help(t.test)
t.test(extra~group,data=sleep,alternative=c('two-sided','less','greater'))
t.test(extra~group,data=sleep,alternative='greater')
t.test(extra~group,data=sleep,alternative='smaller')
t.test(extra~group,data=sleep,alternative='less')
t.test(extra~group,data=sleep,alternative='two-sided')
t.test(extra~group,data=sleep,alternative='two.sided')
t.test(extra~group,data=sleep,alternative=c('two.sided','less'))
t.test(extra~group,data=sleep,alternative=c("two.sided","less"))
t.test(extra~group,data=sleep,alternative='less')
t.test(extra~group,data=sleep,alternative='greater')
t.test(extra~group,data=sleep,alternative='two.sided')
install.packages("tidyverse")
library(forcats)
library(dplyr)
library(ggplot2)
starwars %>%
filter(!is.na(species)) %>%
count(species, sort = TRUE)
data("infert")
infert
help(infert)
file <- "https://archive.ics.uci.edu/ml/machine-learning-databases/parkinsons/telemonitoring/parkinsons_updrs.data.txt"
readc.csv(file)
file <- "https://archive.ics.uci.edu/ml/machine-learning-databases/parkinsons/telemonitoring/parkinsons_updrs.data.txt"
read_csv(file)
file <- "https://archive.ics.uci.edu/ml/machine-learning-databases/parkinsons/telemonitoring/parkinsons_updrs.data.csv"
read_csv(file)
file <- "https://archive.ics.uci.edu/ml/machine-learning-databases/parkinsons/telemonitoring/parkinsons_updrs.data.csv"
pakinsons <-read_csv(file)
file <- "https://archive.ics.uci.edu/ml/machine-learning-databases/parkinsons/telemonitoring/parkinsons_updrs.data"
pakinsons <-read_text(file)
file <- "https://archive.ics.uci.edu/ml/machine-learning-databases/parkinsons/telemonitoring/parkinsons_updrs.data"
pakinsons <-read.csv2(file)
file <- "https://archive.ics.uci.edu/ml/machine-learning-databases/parkinsons/telemonitoring/parkinsons_updrs.data"
pakinsons <-read.table(file)
file <- "https://archive.ics.uci.edu/ml/machine-learning-databases/parkinsons/telemonitoring/parkinsons_updrs.names"
pakinsons <-read.csv(file)
file <- "https://archive.ics.uci.edu/ml/machine-learning-databases/parkinsons/telemonitoring/parkinsons_updrs.names"
pakinsons <-read.csv(file)
file <- "https://archive.ics.uci.edu/ml/machine-learning-databases/parkinsons/telemonitoring/parkinsons_updrs.names"
pakinsons <-read.csv(file,header=TRUE)
file <- "https://archive.ics.uci.edu/ml/machine-learning-databases/00244/fertility_Diagnosis.txt"
pakinsons <-read.table(file,header=TRUE)
file <- "https://archive.ics.uci.edu/ml/machine-learning-databases/00244/fertility_Diagnosis.txt"
pakinsons <-read.table(file,header=TRUE)
file <- "https://archive.ics.uci.edu/ml/machine-learning-databases/00244/fertility_Diagnosis.txt"
fertility <-read.table(file,header=TRUE)
fertility
file <- "https://raw.githubusercontent.com/plotly/datasets/master/diabetes.csvt"
diabetes <-read.csv(file,header=TRUE)
file <- "https://raw.githubusercontent.com/plotly/datasets/master/diabetes.csv"
diabetes <-read.csv(file,header=TRUE)
diabetes
plot(diabetes)
plot(diabetes)
regression <- lm(diabetes$BMI~diabetes$BloodPressure)
summary(regression)
regression <- lm(diabetes$BMI~diabetes$BloodPressure+diabetes$SkinThickness)
summary(regression)
setwd("~/Documents/Documents – Alfred’s MacBook Pro/Training/NICF - Pattern Recognition and Machine Learning with R/exercises")
diabetes
predict(regressuibm data.frame(BloodPress=72,SkinThickness=35))
predict(regressuibm data.frame(BloodPressure=72,SkinThickness=35))
predict(regression, data.frame(BloodPressure=72,SkinThickness=35))
predict(regression, newdata = data.frame(BloodPressure=72,SkinThickness=35))
diabetes.regression <- lm(BMI~BloodPressure+SkinThickness, data = diabetes)
diabetes.subset <-subset(diabetes,select = c(BlookPressure, SkinThickness,BMI))
diabetes.subset <-subset(diabetes,select = c(BloodPressure, SkinThickness,BMI))
diabetes.regression <- lm(BMI~BloodPressure+SkinThickness, data = diabetes.subset)
summary(diabetes.regression )
predict(diabetes.regression , newdata = data.frame(BloodPressure=72,SkinThickness=35))
diabetes
# Create task
classifier.task = makeClassifTask(data =diabetes, target= "Outcome")
# Create SVM Learner
svm = makeLearner("classif.svm")
# Create the model
model = train(svm, classifier.task)
# K-fold Cross Validation
kfold = makeResampleDesc("RepCV", folds=10,reps=50)
kfoldCV = resample(learner=svm,task = classifier.task, resampling = kfold)
library(mlr)
# Create task
classifier.task = makeClassifTask(data =diabetes, target= "Outcome")
# Create SVM Learner
svm = makeLearner("classif.svm")
# Create the model
model = train(svm, classifier.task)
# K-fold Cross Validation
kfold = makeResampleDesc("RepCV", folds=10,reps=50)
kfoldCV = resample(learner=svm,task = classifier.task, resampling = kfold)
# Visualize the result
plotLearnerPrediction(knn, features=c("Petal.Length","Petal.Width"), task=classifier.task)
# Visualize the result
plotLearnerPrediction(svm, features=c("BloodPressure","SkinThickness"), task=classifier.task)
calculateConfusionMatrix(kfoldCV$pred)
df = generateThreshVsPerfData(kfoldCV$pred, measures = list(fpr,tpr,mmce))
plotROCCurves(df)
df = generateThreshVsPerfData(kfoldCV$pred, measures = list(fpr,tpr,mmce))
plotROCCurves(df)
disM <- dist(diabetes)
hcluster <- hclust(disM)
# Visualization
plot(as.dendrogram(hcluster))
rect.hclust(hcluster, k=3, border="red")
plot(as.dendrogram(hcluster))
rect.hclust(hcluster, k=2, border="red")
plot(as.dendrogram(hcluster))
rect.hclust(hcluster, k=4, border="red")
plot(as.dendrogram(hcluster))
rect.hclust(hcluster, k=3, border="red")
distance <- get_dist(diabetes)
fviz_dist(distance, gradient = list(low = "#00AFBB", mid = "white", high = "#FC4E07"))
library(factoextra)
distance <- get_dist(diabetes)
fviz_dist(distance, gradient = list(low = "#00AFBB", mid = "white", high = "#FC4E07"))
diabetes %>% select(-Outcome) %>% # remove Outcome column
scale() %>%                 # scale to 0 mean and unit variance
prcomp() ->                 # do PCA
pca                         # store result as `pca`
pca
library(pROC)
diabetes %>% select(-Outcome) %>% # remove Outcome column
scale() %>%                 # scale to 0 mean and unit variance
prcomp() ->                 # do PCA
pca                         # store result as `pca`
pca
diabetes %>% select(-Outcome) %>% # remove Outcome column
scale() %>%                 # scale to 0 mean and unit variance
prcomp() ->                 # do PCA
pca                         # store result as `pca`
pca <- prcomp(diabetes)
diabetes = subset(diabetes,select=(-Outcome))
scale(diabetes)
pca <- prcomp(diabetes)
pca
pca_data <- data.frame(pca$x, Outcome=diabetes$Outcome)
ggplot(pca_data, aes(x=PC1, y=PC2, color=Species)) + geom_point()
pca_data <- data.frame(pca$x, Outcome=diabetes$Outcome)
ggplot(pca_data, aes(x=PC1, y=PC2, color=Outcome)) + geom_point()
pca_data <- data.frame(pca$x, Outcome=diabetes$Outcome)
pca
pca$x
data.frame(pca$x, Outcome=diabetes$Outcome)
diabetes
data(diabetes)
diabetes.x = subset(diabetes,select=(-Outcome))
scale(diabetes)
pca <- prcomp(diabetes)
pca
data(diabetes)
diabetes.x = subset(diabetes,select=(-Outcome))
scale(diabetes.x)
pca <- prcomp(diabetes.x)
pca
pca_data <- data.frame(pca$x, Outcome=diabetes$Outcome)
ggplot(pca_data, aes(x=PC1, y=PC2, color=Outcome)) + geom_point()
pca_data <- data.frame(pca$x, Outcome=diabetes$Outcome)
data(diabetes)
diabetes.x = subset(diabetes,select=(-Outcome))
scale(diabetes.x)
pca <- prcomp(diabetes.x)
pca
data(diabetes)
diabetes.x = subset(diabetes,select=(-Outcome))
scale(diabetes.x)
pca <- prcomp(diabetes.x)
data(diabetes)
file <- "https://raw.githubusercontent.com/plotly/datasets/master/diabetes.csv"
diabetes <-read.csv(file,header=TRUE)
diabetes.x = subset(diabetes,select=(-Outcome))
scale(diabetes.x)
pca <- prcomp(diabetes.x)
pca
pca_data <- data.frame(pca$x, Outcome=diabetes$Outcome)
ggplot(pca_data, aes(x=PC1, y=PC2, color=Outcome)) + geom_point()
diabetes$Outcome = as.factor((diabetes$Outcome))
diabetes.x = subset(diabetes,select=(-Outcome))
scale(diabetes.x)
pca <- prcomp(diabetes.x)
pca
# Visualize
pca_data <- data.frame(pca$x, Outcome=diabetes$Outcome)
ggplot(pca_data, aes(x=PC1, y=PC2, color=Outcome)) + geom_point()
classifier.task = makeClassifTask(data =diabetes, target= "Outcome")
# Create SVM Learner
svm = makeLearner("classif.svm")
# Create the model
model = train(svm, classifier.task)
# K-fold Cross Validation
kfold = makeResampleDesc("RepCV", folds=10,reps=50)
kfoldCV = resample(learner=svm,task = classifier.task, resampling = kfold)
### Confusion Matrix
calculateConfusionMatrix(kfoldCV$pred)
df = generateThreshVsPerfData(kfoldCV$pred, measures = list(fpr,tpr,mmce))
plotROCCurves(df)
# Create task
classifier.task = makeClassifTask(data = diabetes.regression, target= "Outcome")
# Create Learner
nn = makeLearner("classif.nnet")
# Create Model
model = train(nn, classifer.task)
# K-fold Cross Validation
kfold = makeResampleDesc("RepCV", folds=10,reps=50)
kfoldCV = resample(learner=nn,task = classifier.task, resampling = kfold)
# Visualize results
plotLearnerPrediction(nn, features=c("Petal.Length","Petal.Width"), task=classifier.task)
pca
